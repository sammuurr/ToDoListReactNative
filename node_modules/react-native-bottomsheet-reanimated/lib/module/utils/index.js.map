{"version":3,"sources":["index.tsx"],"names":["Dimensions","PixelRatio","screenHeight","get","height","normalize","elemHeight","parseFloat","roundToNearestPixel"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,cAAvC,C,CAEA;;AACA,IAAIC,YAAY,GAAGF,UAAU,CAACG,GAAX,CAAe,QAAf,EAAyBC,MAA5C;AAEA,OAAO,MAAMC,SAAS,GAAID,MAAD,IAAoB;AAC3C;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD,GAFD,MAEO;AACL,UAAME,UAAU,GAAGC,UAAU,CAACH,MAAD,CAA7B,CADK,CAEL;AACA;;AACA,WAAOH,UAAU,CAACO,mBAAX,CAAgCN,YAAY,GAAGI,UAAhB,GAA8B,GAA7D,CAAP;AACD;AACF,CAVM","sourcesContent":["import { Dimensions, PixelRatio } from 'react-native';\n\n// Retrieve initial screen's height\nlet screenHeight = Dimensions.get('window').height;\n\nexport const normalize = (height: number) => {\n  // Parse string percentage input and convert it to number.\n  if (typeof height === 'number') {\n    return height;\n  } else {\n    const elemHeight = parseFloat(height);\n    // Use PixelRatio.roundToNearestPixel method in order to round the layout\n    // size (dp) to the nearest one that correspons to an integer number of pixels.\n    return PixelRatio.roundToNearestPixel((screenHeight * elemHeight) / 100);\n  }\n};\n"]}