function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Type from './Type';
import actionCreatorCreator from './../actionCreatorCreator';
import { snakeToCamelCase } from './../utils';

class Async extends Type {
  actions() {
    const types = this.types();
    return Object.keys(types).reduce((actions, name) => _objectSpread({}, actions, {
      [snakeToCamelCase(name)]: actionCreatorCreator(types[name])
    }), {});
  }

  types() {
    return {
      [`${this.name}_REQUEST`]: `${this.namespace}${this.name}_REQUEST`,
      [`${this.name}_FAILURE`]: `${this.namespace}${this.name}_FAILURE`,
      [`${this.name}_SUCCESS`]: `${this.namespace}${this.name}_SUCCESS`
    };
  }

}

export default Async;